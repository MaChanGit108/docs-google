---
breadcrumb: PCF Services
title: Using GCP Service Broker
---

This topic describes how developers set up, operate, and scale Google Cloud Platform (GCP) resources from Pivotal Cloud Foundry (PCF) by creating and managing service instances using the GCP Service Broker.

##<a id="view"></a>View Services

1. Run `cf marketplace` to list the available GCP Service Broker services.

1. Run `cf marketplace -s SERVICE` to view the descriptions for the plans of a service.

<p class="note"><strong>Note</strong>: See the <a href="https://cloud.google.com/pricing/#details">GCP Pricing</a> topic to view pricing details for each service.</p>

##<a id="create"></a>Create Service Instances

This section describes how to create instances of each of the services supported by the GCP Service Broker.

###<a id="storage"></a>Google Cloud Storage

#### Create 
Run `cf create-service google-storage` to create a new bucket. The following example creates a bucket named `mybucket` with the `standard` plan:

<pre class="terminal">$ cf create-service google-storage standard mybucket -c '{"name": "mybucket"}'
</pre>

Optionally, you can provide a location for your storage bucket. This parameter defaults to `us`. 


#### Bind

Bind the `google-storage` service to an app to create a new service account and private key. The following example creates a service account with the minimum necessary permissions to view bucket objects. See the [GCP Understanding Roles](https://cloud.google.com/iam/docs/understanding-roles) topic for more information.

<pre class="terminal">$ cf bind-service myapp mybucket -c '{"role": "storage.objectViewer"}'
</pre>

<p class="note"><strong>Note</strong>: Running  <code>cf unbind-service</code> deletes the service account and key created when binding.</p>


###<a id="bigquery"></a>Google BigQuery


#### Create 

Run `cf create-service google-bigquery` to create a new dataset. The following example creates a dataset named `mydataset` with the `default` plan:
<pre class="terminal">$ cf create-service google-bigquery default mydataset -c '{"name": "mydataset"}'
</pre>

#### Bind

Bind the `google-bigquery` service to an app to create a new service account and private key.

The following example creates a service account with the minimum necessary permissions to view datasets. See the [GCP Understanding Roles](https://cloud.google.com/iam/docs/understanding-roles) topic for more information.

<pre class="terminal">$ cf bind-service myapp mydataset -c '{"role": "bigquery.dataViewer"}'
</pre>

<p class="note"><strong>Note</strong>: Running  <code>cf unbind-service</code> deletes the service account and key created when binding.</p>

###<a id="pubsub"></a>Google PubSub

#### Create 

Run `cf create-service google-pubsub` to create a new topic and optional subscription. The following example creates a topic named `mytopic` and a pull subscription named `mysubscription` with the `default` plan:
<pre class="terminal">$ cf create-service google-pubsub default mypubsub -c '{"topic\_name": "mytopic", "subscription\_name": "mysubscription"}'
</pre>

You can optionally specify the following parameters:

* `subscription_name`
* `is_push`: Defaults to false
* `endpoint`: For when `is_push` = `true`. Defaults to `nil`.
* `ack_deadline`: In seconds. Defaults to `10` with a maximum of `600`.

#### Bind

Bind the `google-pubsub` service to an app to create a new service account and private key. The following example creates a service account with minimum necessary permissions to view topics and subscriptions. See the [GCP Understanding Roles](https://cloud.google.com/iam/docs/understanding-roles) topic for more information.

<pre class="terminal">$ cf bind-service myapp mypubsub -c '{"role": "pubsub.viewer"}'
</pre>

<p class="note"><strong>Note</strong>: Running  <code>cf unbind-service</code> deletes the service account and key created when binding.</p>

###<a id="cloudsql"></a>Google CloudSQL

#### Create 

Run `cf create-service google-cloudsql` to create a new database instance and database. PCF Operators create custom plans for Google Cloud SQL when installing the GCP Service Broker. The following example creates an instance named `myinstance` and a database named `mydb` with a custom `d4_standard` plan:
<pre class="terminal">$ cf create-service google-cloudsql d4\_standard mycloudsql -c '{"instance\_name": "myinstance", "database\_name": "mydb"}'
</pre>

<p class="note"><strong>Note</strong>: Google CloudSQL uses asynchronous provisioning.</p>

You can optionally specify the following parameters:

* `version`: Defaults to `5.6`.
* `disk_size`: In GB. Only for 2nd gen, defaults to `10`.
* `region`: Defaults to `us-central`.
* `zone`: Only for 2nd gen.
* `disk_type`: Only for 2nd gen. Defaults to `ssd`.
* `failover_replica_name`: Only for 2nd gen. Creates a failover replica if specified. Defaults to "". 
* `maintenance_window_day`: For 2nd gen only. Defaults to `1`, which is Sunday.
* `maintenance_window_hour`: For 2nd gen only, defaults to `0`.
* `backups_enabled` Defaults to `true`. Set to `false` to disable.
* `backup_start_time`: Defaults to `06:00`.
* `binlog`: Defaults to `false` for 1st gen, `true` for 2nd gen. Set to `true` to use. 
* `activation_policy`: Defaults to on demand.
* `replication_type`: Defaults to `synchronous`
* `auto_resize`: For 2nd gen only. Defaults to `false`. Set to `true` to use.



#### Bind

Bind the `google-cloudsql` service to an app to create a new user and set of ssl certs. The following example creates a new user and ssl certs.

<pre class="terminal">$ cf bind-service myapp mycloudsql -c '{"username": "myuser", "password": "mypass"}'
</pre>

<p class="note"><strong>Note</strong>: Running  <code>cf unbind-service</code> deletes this user and invalidate the created ssl certs.</p>


###<a id="pubsub"></a>Google Machine Learning APIs

#### Create 

Using `cf create-service` to create an instance of `google-ml-apis` will not create any resources - this service is for bindings only.
It is likely that this implementation will change in the future.

<pre class="terminal">$ cf create-service google-ml-apis default mymlapis
</pre>

#### Bind 

Bind the `google-mlapis` service to an app to create a new service account and private key. The following example creates a service account with the minimum necessary permissions to use the Machine Learning APIs. See the [GCP Understanding Roles](https://cloud.google.com/iam/docs/understanding-roles) topic for more information.

<pre class="terminal">$ cf bind-service myapp mymlapis -c '{"role": "viewer"}'
</pre>

<p class="note"><strong>Note</strong>: Running  <code>cf unbind-service</code> deletes the service account and key created when binding.</p>

##<a id="delete"></a>Delete a Service Instance

<p class="note"><strong>Note</strong>: Before deleting a service instance, ensure there are no apps bound to the service instance and no data contained within, such as objects in a storage bucket.</p>
Run the following command to delete a service instance:
<pre class="terminal">$ cf delete-service YOUR-SERVICE-INSTANCE
Really delete the service YOUR-SERVICE-INSTANCE> y
Deleting service YOUR-SERVICE-INSTANCE in org system / space dev1 as appdev1...
OK
Delete in progress. Use 'cf services' or 'cf service YOUR-SERVICE-INSTANCE' to check operation status.
</pre>
